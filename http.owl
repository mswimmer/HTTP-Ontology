<?xml version="1.0"?>


<!DOCTYPE rdf:RDF [
    <!ENTITY owl "http://www.w3.org/2002/07/owl#" >
    <!ENTITY dc "http://purl.org/dc/elements/1.1/" >
    <!ENTITY xsd "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY owl2xml "http://www.w3.org/2006/12/owl2-xml#" >
    <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
    <!ENTITY http "https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#" >
]>


<rdf:RDF xmlns="https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#"
     xml:base="https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     xmlns:owl2xml="http://www.w3.org/2006/12/owl2-xml#"
     xmlns:http="https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#"
     xmlns:owl="http://www.w3.org/2002/07/owl#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
    <owl:Ontology rdf:about=""/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Annotation properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    <owl:AnnotationProperty rdf:about="&dc;identifier"/>
    <owl:AnnotationProperty rdf:about="&dc;title"/>
    <owl:AnnotationProperty rdf:about="&dc;description"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Data properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#WWW-authenticate -->

    <owl:DatatypeProperty rdf:about="#WWW-authenticate">
        <rdfs:label rdf:datatype="&xsd;string"
            >WWW-Authenticate</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used in 401 (Unauthorized) response messages. The field value consists of at least one challenge that indicates the authentication scheme(s) and parameters applicable to the Request-URI.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#accept -->

    <owl:DatatypeProperty rdf:about="#accept">
        <rdfs:label rdf:datatype="&xsd;string">Accept</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The Accept request-header field can be used to specify certain media types which are acceptable for the response. Accept headers can be used to indicate that the request is specifically limited to a small set of desired types, as in the case of a request for an in-line image.

       Accept         = &quot;Accept&quot; &quot;:&quot;
                        #( media-range [ accept-params ] )
       media-range    = ( &quot;*/*&quot;
                        | ( type &quot;/&quot; &quot;*&quot; )
                        | ( type &quot;/&quot; subtype )
                        ) *( &quot;;&quot; parameter )
       accept-params  = &quot;;&quot; &quot;q&quot; &quot;=&quot; qvalue *( accept-extension )
       accept-extension = &quot;;&quot; token [ &quot;=&quot; ( token | quoted-string ) ]
The asterisk &quot;*&quot; character is used to group media types into ranges, with &quot;*/*&quot; indicating all media types and &quot;type/*&quot; indicating all subtypes of that type. The media-range MAY include media type parameters that are applicable to that range.

Each media-range MAY be followed by one or more accept-params, beginning with the &quot;q&quot; parameter for indicating a relative quality factor. The first &quot;q&quot; parameter (if any) separates the media-range parameter(s) from the accept-params. Quality factors allow the user or user agent to indicate the relative degree of preference for that media-range, using the qvalue scale from 0 to 1 (section 3.9). The default value is q=1.

      Note: Use of the &quot;q&quot; parameter name to separate media type
      parameters from Accept extension parameters is due to historical
      practice. Although this prevents any media type parameter named
      &quot;q&quot; from being used with a media range, such an event is believed
      to be unlikely given the lack of any &quot;q&quot; parameters in the IANA
      media type registry and the rare usage of any media type
      parameters in Accept. Future media types are discouraged from
      registering any parameter named &quot;q&quot;.
The example

       Accept: audio/*; q=0.2, audio/basic
SHOULD be interpreted as &quot;I prefer audio/basic, but send me any audio type if it is the best available after an 80% mark-down in quality.&quot;

If no Accept header field is present, then it is assumed that the client accepts all media types. If an Accept header field is present, and if the server cannot send a response which is acceptable according to the combined Accept field value, then the server SHOULD send a 406 (not acceptable) response.

A more elaborate example is

       Accept: text/plain; q=0.5, text/html,
               text/x-dvi; q=0.8, text/x-c
Verbally, this would be interpreted as &quot;text/html and text/x-c are the preferred media types, but if they do not exist, then send the text/x-dvi entity, and if that does not exist, send the text/plain entity.&quot;

Media ranges can be overridden by more specific media ranges or specific media types. If more than one media range applies to a given type, the most specific reference has precedence. For example,

       Accept: text/*, text/html, text/html;level=1, */*
have the following precedence:

       1) text/html;level=1
       2) text/html
       3) text/*
       4) */*
The media type quality factor associated with a given type is determined by finding the media range with the highest precedence which matches that type. For example,

       Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,
               text/html;level=2;q=0.4, */*;q=0.5
would cause the following values to be associated:

       text/html;level=1         = 1
       text/html                 = 0.7
       text/plain                = 0.3
       image/jpeg                = 0.5
       text/html;level=2         = 0.4
       text/html;level=3         = 0.7
      Note: A user agent might be provided with a default set of quality
      values for certain media ranges. However, unless the user agent is
      a closed system which cannot interact with other rendering agents,
      this default set ought to be configurable by the user.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#accept-charset -->

    <owl:DatatypeProperty rdf:about="#accept-charset">
        <rdfs:label rdf:datatype="&xsd;string">Accept-Charset</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies which character encodings(confusingly called &quot;charsets&quot;) are acceptable for the response and to assign preferences to them.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#accept-encoding -->

    <owl:DatatypeProperty rdf:about="#accept-encoding">
        <rdfs:label rdf:datatype="&xsd;string">Accept-Encoding</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies which data format tranformations, confusingly called content (en)codings, such as compressionmechanisms, are acceptable for the response and to assign preferences to them.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#accept-language -->

    <owl:DatatypeProperty rdf:about="#accept-language">
        <rdfs:label rdf:datatype="&xsd;string">Accept-Language</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies which natural languages are acceptable for the response and to assign preferences to them. Useful for language negotation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#accept-ranges -->

    <owl:DatatypeProperty rdf:about="#accept-ranges">
        <rdfs:label rdf:datatype="&xsd;string">Accept-Ranges</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates the server&#39;s acceptance of range requestsfor a resource.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#age -->

    <owl:DatatypeProperty rdf:about="#age">
        <rdfs:label rdf:datatype="&xsd;string">Age</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Gives the sender&#39;s estimate of the amount of time since the response (or its revalidation) was generated at the origin server.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#allow -->

    <owl:DatatypeProperty rdf:about="#allow">
        <rdfs:label rdf:datatype="&xsd;string">Allow</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Lists the set of methods supported by the resource identified by the Request-URI. The purpose is to inform the recipient of valid methods associated with the resource.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#authorization -->

    <owl:DatatypeProperty rdf:about="#authorization">
        <rdfs:label rdf:datatype="&xsd;string">Authorization</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Consists of credentials containing the authentication information of the client for the realm of the resource being requested</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#cache-control -->

    <owl:DatatypeProperty rdf:about="#cache-control">
        <rdfs:label rdf:datatype="&xsd;string">Cache-Control</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies directives that must be obeyed by all caching mechanisms along the request/response chain.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#connection -->

    <owl:DatatypeProperty rdf:about="#connection">
        <rdfs:label rdf:datatype="&xsd;string">Connection</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies options that are desired for the particular connection and must notbe communicated by proxies over further connections.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#content-MD5 -->

    <owl:DatatypeProperty rdf:about="#content-MD5">
        <rdfs:label rdf:datatype="&xsd;string">Content-MD5</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >An MD5digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#content-encoding -->

    <owl:DatatypeProperty rdf:about="#content-encoding">
        <rdfs:label rdf:datatype="&xsd;string"
            >Content-Encoding</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used as a modifier to the media-type, to indicate what additional data format transformations such as compression have been applied to the entity-body.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#content-language -->

    <owl:DatatypeProperty rdf:about="#content-language">
        <rdfs:label rdf:datatype="&xsd;string"
            >Content-Language</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies the natural language(s) of the intended audience for the enclosed entity. But according to RFC 3282, specifies the language(s) of the entity.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#content-length -->

    <owl:DatatypeProperty rdf:about="#content-length">
        <rdfs:label rdf:datatype="&xsd;string">Content-Length</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates the size (in octets) of the entity-body that is sent or that would have been sent if it has reen requested.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#content-location -->

    <owl:DatatypeProperty rdf:about="#content-location">
        <rdfs:label rdf:datatype="&xsd;string"
            >Content-Location</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Supplies the resource location for the entity enclosed in the message when that entity is accessible from a location separate from the requested resource&#39;s URI.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#content-range -->

    <owl:DatatypeProperty rdf:about="#content-range">
        <rdfs:label rdf:datatype="&xsd;string">Content-Range</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Sent with a partial entity-body to specify where in the full entity-body the partial body should be applied.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#content-type -->

    <owl:DatatypeProperty rdf:about="#content-type">
        <rdfs:label rdf:datatype="&xsd;string">Content-Type</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies the Internet media typeof the entity-body that is sent or would have been sent if requested. Often includes a charset parameter specifying the character encoding.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#date -->

    <owl:DatatypeProperty rdf:about="#date">
        <rdfs:label rdf:datatype="&xsd;string">Date</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Date and time at which the message was originated.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#entity -->

    <owl:DatatypeProperty rdf:about="#entity">
        <rdfs:label rdf:datatype="&xsd;string">Entity</rdfs:label>
        <rdfs:subPropertyOf rdf:resource="#header"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#etag -->

    <owl:DatatypeProperty rdf:about="#etag">
        <rdfs:label rdf:datatype="&xsd;string">ETag</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Provides the current value of the entity tag for the requested variant, for caching purposes.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#expect -->

    <owl:DatatypeProperty rdf:about="#expect">
        <rdfs:label rdf:datatype="&xsd;string">Expect</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates that particular server behaviors are required by the client.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#expires -->

    <owl:DatatypeProperty rdf:about="#expires">
        <rdfs:label rdf:datatype="&xsd;string">Expires</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Gives the date/time after which the response is considered stale, for caching purposes.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#from -->

    <owl:DatatypeProperty rdf:about="#from">
        <rdfs:label rdf:datatype="&xsd;string">From</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The Internet e-mail address for the human user who controls the requesting browser or other client.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#header -->

    <owl:DatatypeProperty rdf:about="#header"/>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#host -->

    <owl:DatatypeProperty rdf:about="#host">
        <rdfs:label rdf:datatype="&xsd;string">Host</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies the Internet host and port number of the resource being requested. Obligatory in all HTTP/1.1 requests.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    
    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#hostname -->

    <owl:DatatypeProperty rdf:about="#hostname">
        <rdfs:label rdf:datatype="&xsd;string">Hostname</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Specifies the Internet host of the resource being requested. This is derived from #host.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    

    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#if-match -->

    <owl:DatatypeProperty rdf:about="#if-match">
        <rdfs:label rdf:datatype="&xsd;string">If-Match</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used with a method to make it conditional: a client that has previously obtained entities can verify that one of those entities is current by including a list of their associated entity tags in the If-Match header field.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#if-modified-since -->

    <owl:DatatypeProperty rdf:about="#if-modified-since">
        <rdfs:label rdf:datatype="&xsd;string"
            >If-Modified-Since</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used with a method to make it conditional: if the requested variant has not been modified since the time specified in this field, the server will not return the entity but information about this fact.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#if-none-match -->

    <owl:DatatypeProperty rdf:about="#if-none-match">
        <rdfs:label rdf:datatype="&xsd;string">If-None-Match</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used with a method to make it conditional: a client that has previously obtained entities can verify that none of those entities is current by including a list of their associated entity tags in the If-None-Match header field.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#if-range -->

    <owl:DatatypeProperty rdf:about="#if-range">
        <rdfs:label rdf:datatype="&xsd;string">If-Range</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used together with Range to say: &quot;if the entity is unchanged, send me the part(s) that I am missing; otherwise, send me the entire new entity&quot;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#if-unmodified-since -->

    <owl:DatatypeProperty rdf:about="#if-unmodified-since">
        <rdfs:label rdf:datatype="&xsd;string"
            >If-Unmodified-Since</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used with a method to make it conditional: if the requested variant has been modified since the time specified in this field, the server will not perform the requested operation but information about this fact.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#last-modified -->

    <owl:DatatypeProperty rdf:about="#last-modified">
        <rdfs:label rdf:datatype="&xsd;string">Last-Modified</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates the date and time at which the origin server believes the variant was last modified.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#entity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#location -->

    <owl:DatatypeProperty rdf:about="#location">
        <rdfs:label rdf:datatype="&xsd;string">Location</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Redirects the recipient to a location other than the Request-URI for completion of the request or identification of a new resource.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#max-forwards -->

    <owl:DatatypeProperty rdf:about="#max-forwards">
        <rdfs:label rdf:datatype="&xsd;string">Max-Forwards</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Provides a mechanism with the TRACE and OPTIONS methods to limit the number of proxies or gateways that can forward the request to the next inbound server.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#pragma -->

    <owl:DatatypeProperty rdf:about="#pragma">
        <rdfs:label rdf:datatype="&xsd;string">Pragma</rdfs:label>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#proxy-authenticate -->

    <owl:DatatypeProperty rdf:about="#proxy-authenticate">
        <rdfs:label rdf:datatype="&xsd;string"
            >Proxy-Authenticate</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Included as part of a 407 (Proxy Authentication Required) response. The field value consists of a challenge that indicates the authentication scheme and parameters applicable to the proxy for this Request-URI.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#proxy-authorization -->

    <owl:DatatypeProperty rdf:about="#proxy-authorization">
        <rdfs:label rdf:datatype="&xsd;string"
            >Proxy-Authorization</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used by a client to identify itself (or its user) to a proxy which requires authentication.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#range -->

    <owl:DatatypeProperty rdf:about="#range">
        <rdfs:label rdf:datatype="&xsd;string">Range</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Restricts the request to some part(s), specified as range(s) of octets, in the resource.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#referer -->

    <owl:DatatypeProperty rdf:about="#referer">
        <rdfs:label rdf:datatype="&xsd;string">Referer</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used by a client to specify, for the server&#39;s benefit, the address (URI) of the resource from which the Request-URI was obtained.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#request -->

    <owl:DatatypeProperty rdf:about="#request">
        <rdfs:label rdf:datatype="&xsd;string">Request</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >A request message from a client to a server includes, within the first line of that message, the method to be applied to the resource, the identifier of the resource, and the protocol version in use.

        Request       = Request-Line              ; Section 5.1
                        *(( general-header        ; Section 4.5
                         | request-header         ; Section 5.3
                         | entity-header ) CRLF)  ; Section 7.1
                        CRLF
                        [ message-body ]          ; Section 4.3</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#header"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#response -->

    <owl:DatatypeProperty rdf:about="#response">
        <rdfs:label rdf:datatype="&xsd;string">Response</rdfs:label>
        <rdfs:subPropertyOf rdf:resource="#header"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#retry-after -->

    <owl:DatatypeProperty rdf:about="#retry-after">
        <rdfs:label rdf:datatype="&xsd;string">Retry-After</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates how long the service is expected to be unavailable to the requesting client.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#server -->

    <owl:DatatypeProperty rdf:about="#server">
        <rdfs:label rdf:datatype="&xsd;string">Server</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Contains information about the software used by the origin server to handle the request.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#te -->

    <owl:DatatypeProperty rdf:about="#te">
        <rdfs:label rdf:datatype="&xsd;string">TE</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates what extension transfer-codings the client is willing to accept in the response and whether or not it is willing to accept trailer fields in a chunked transfer-coding.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#trailer -->

    <owl:DatatypeProperty rdf:about="#trailer">
        <rdfs:label rdf:datatype="&xsd;string">Trailer</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer-coding.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#transfer-encoding -->

    <owl:DatatypeProperty rdf:about="#transfer-encoding">
        <rdfs:label rdf:datatype="&xsd;string"
            >Transfer-Encoding</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates what (if any) type of transformation has been applied to the message body in order to safely transfer it between the sender and the recipient. This differs from the Content-Encoding in that the transfer-coding is a property of the message, not of the entity.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#upgrade -->

    <owl:DatatypeProperty rdf:about="#upgrade">
        <rdfs:label rdf:datatype="&xsd;string">Upgrade</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used by a client to specify what additional communication protocols it supports and would like to use if the server finds it appropriate to switch protocols. The server uses the Upgrade header to indicate which protocol(s) are being switched.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#user-agent -->

    <owl:DatatypeProperty rdf:about="#user-agent">
        <rdfs:label rdf:datatype="&xsd;string">User-Agent</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Contains information about the user agent (client) originating the request</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#vary -->

    <owl:DatatypeProperty rdf:about="#vary">
        <rdfs:label rdf:datatype="&xsd;string">Vary</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Indicates the set of request-header fields that fully determines, while the response is fresh, whether a cache is permitted to use the response to reply to a subsequent request without revalidation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#via -->

    <owl:DatatypeProperty rdf:about="#via">
        <rdfs:label rdf:datatype="&xsd;string">Via</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used by gateways and proxies to indicate the intermediate protocols and recipients between the user agent and the server on requests, and between the origin server and the client on responses.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#warning -->

    <owl:DatatypeProperty rdf:about="#warning">
        <rdfs:label rdf:datatype="&xsd;string">Warning</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Carries additional information about the status or transformation of a message which might not be reflected in the message.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#request"/>
        <rdfs:subPropertyOf rdf:resource="#response"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Classes
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Accepted -->

    <owl:Class rdf:about="#Accepted">
        <rdfs:label rdf:datatype="&xsd;string">Accepted</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Successful_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">202</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place. There is no facility for re-sending a status code from an asynchronous operation such as this.

				The 202 response is intentionally non-committal. Its purpose is to allow a server to accept a request for some other process (perhaps a batch-oriented process that is only run once per day) without requiring that the user agent&#39;s connection to the server persist until the process is completed. The entity returned with this response SHOULD include an indication of the request&#39;s current status and either a pointer to a status monitor or some estimate of when the user can expect the request to be fulfilled.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Bad_Gateway -->

    <owl:Class rdf:about="#Bad_Gateway">
        <rdfs:label rdf:datatype="&xsd;string">Bad_Gateway</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Internal_Server_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">502</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Bad_Request -->

    <owl:Class rdf:about="#Bad_Request">
        <rdfs:label rdf:datatype="&xsd;string">400 Bad Request</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">400</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#CONNECT -->

    <owl:Class rdf:about="#CONNECT">
        <rdfs:label rdf:datatype="&xsd;string">CONNECT</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >This specification reserves the method name CONNECT for use with a proxy that can dynamically switch to being a tunnel (e.g. SSL tunneling [44])</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Client_Error -->

    <owl:Class rdf:about="#Client_Error">
        <rdfs:label rdf:datatype="&xsd;string">Client_Error</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Status_Code"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The 4xx class of status code is intended for cases in which the client seems to have erred. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. These status codes are applicable to any request method. User agents SHOULD display any included entity to the user.

If the client is sending data, a server implementation using TCP SHOULD be careful to ensure that the client acknowledges receipt of the packet(s) containing the response, before the server closes the input connection. If the client continues sending data to the server after the close, the server&#39;s TCP stack will send a reset packet to the client, which may erase the client&#39;s unacknowledged input buffers before they can be read and interpreted by the HTTP application.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Conflict -->

    <owl:Class rdf:about="#Conflict">
        <rdfs:label rdf:datatype="&xsd;string">409 Conflict</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">409</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required.
			Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can&#39;t complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Continue -->

    <owl:Class rdf:about="#Continue">
        <rdfs:label rdf:datatype="&xsd;string">100 Continue</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Informational_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">100</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The client SHOULD continue with its request. This interim response is used to inform the client that the initial part of the request has been received and has not yet been rejected by the server. The client SHOULD continue by sending the remainder of the request or, if the request has already been completed, ignore this response. The server MUST send a final response after the request has been completed. See section 8.2.3 for detailed discussion of the use and handling of this status code.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Created -->

    <owl:Class rdf:about="#Created">
        <rdfs:label rdf:datatype="&xsd;string">201 Created</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Successful_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">201</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead.

				A 201 response MAY contain an ETag response header field indicating the current value of the entity tag for the requested variant just created, see section 14.19.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#DELETE -->

    <owl:Class rdf:about="#DELETE">
        <rdfs:label rdf:datatype="&xsd;string">DELETE</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Idempotent_Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The DELETE method requests that the origin server delete the resource identified by the Request-URI. This method MAY be overridden by human intervention (or other means) on the origin server. The client cannot be guaranteed that the operation has been carried out, even if the status code returned from the origin server indicates that the action has been completed successfully. However, the server SHOULD NOT indicate success unless, at the time the response is given, it intends to delete the resource or move it to an inaccessible location.

A successful response SHOULD be 200 (OK) if the response includes an entity describing the status, 202 (Accepted) if the action has not yet been enacted, or 204 (No Content) if the action has been enacted but the response does not include an entity.

If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Entity -->

    <owl:Class rdf:about="#Entity">
        <rdfs:subClassOf rdf:resource="#Header"/>
        <rdfs:comment xml:lang="en"
            >Metainformation about an entity body or resource.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Expectation_Failed -->

    <owl:Class rdf:about="#Expectation_Failed">
        <rdfs:label rdf:datatype="&xsd;string"
            >417 Expectation_Failed</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">417</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The expectation given in an Expect request-header field (see section 14.20) could not be met by this server, or, if the server is a proxy, the server has unambiguous evidence that the request could not be met by the next-hop server.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Forbidden -->

    <owl:Class rdf:about="#Forbidden">
        <rdfs:label rdf:datatype="&xsd;string">403 Forbidden</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">403</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Found -->

    <owl:Class rdf:about="#Found">
        <rdfs:label rdf:datatype="&xsd;string">302 Found</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Redirection_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">302</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The requested resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if indicated by a Cache-Control or Expires header field.
			The temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).
			If the 302 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.
			      Note: RFC 1945 and RFC 2068 specify that the client is not allowed
			      to change the method on the redirected request.  However, most
			      existing user agent implementations treat 302 as if it were a 303
			      response, performing a GET on the Location field-value regardless
			      of the original request method. The status codes 303 and 307 have
			      been added for servers that wish to make unambiguously clear which
			      kind of reaction is expected of the client.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#GET -->

    <owl:Class rdf:about="#GET">
        <rdfs:label rdf:datatype="&xsd;string">GET</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Idempotent_Methods"/>
        <rdfs:subClassOf rdf:resource="#Safe_Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI. If the Request-URI refers to a data-producing process, it is the produced data which shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.

The semantics of the GET method change to a &quot;conditional GET&quot; if the request message includes an If-Modified-Since, If-Unmodified-Since, If-Match, If-None-Match, or If-Range header field. A conditional GET method requests that the entity be transferred only under the circumstances described by the conditional header field(s). The conditional GET method is intended to reduce unnecessary network usage by allowing cached entities to be refreshed without requiring multiple requests or transferring data already held by the client.

The semantics of the GET method change to a &quot;partial GET&quot; if the request message includes a Range header field. A partial GET requests that only part of the entity be transferred, as described in section 14.35. The partial GET method is intended to reduce unnecessary network usage by allowing partially-retrieved entities to be completed without transferring data already held by the client.

The response to a GET request is cacheable if and only if it meets the requirements for HTTP caching described in section 13.

See section 15.1.3 for security considerations when used for forms.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Gateway_Timeout -->

    <owl:Class rdf:about="#Gateway_Timeout">
        <rdfs:label rdf:datatype="&xsd;string"
            >504 Gateway_Timeout</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Internal_Server_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">504</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.

      Note: Note to implementors: some deployed proxies are known to
      return 400 or 500 when DNS lookups time out.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#General -->

    <owl:Class rdf:about="#General">
        <rdfs:subClassOf rdf:resource="#Header"/>
        <rdfs:comment xml:lang="en"
            >Applicable for use both in request and in response messages.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Gone -->

    <owl:Class rdf:about="#Gone">
        <rdfs:label rdf:datatype="&xsd;string">410 Gone</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">410</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The requested resource is no longer available at the server and no forwarding address is known. This condition is expected to be considered permanent. Clients with link editing capabilities SHOULD delete references to the Request-URI after user approval. If the server does not know, or has no facility to determine, whether or not the condition is permanent, the status code 404 (Not Found) SHOULD be used instead. This response is cacheable unless indicated otherwise.
The 410 response is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable and that the server owners desire that remote links to that resource be removed. Such an event is common for limited-time, promotional services and for resources belonging to individuals no longer working at the server&#39;s site. It is not necessary to mark all permanently unavailable resources as &quot;gone&quot; or to keep the mark for any length of time -- that is left to the discretion of the server owner.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#HEAD -->

    <owl:Class rdf:about="#HEAD">
        <rdfs:label rdf:datatype="&xsd;string">HEAD</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Idempotent_Methods"/>
        <rdfs:subClassOf rdf:resource="#Safe_Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response. The metainformation contained in the HTTP headers in response to a HEAD request SHOULD be identical to the information sent in response to a GET request. This method can be used for obtaining metainformation about the entity implied by the request without transferring the entity-body itself. This method is often used for testing hypertext links for validity, accessibility, and recent modification.

The response to a HEAD request MAY be cacheable in the sense that the information contained in the response MAY be used to update a previously cached entity from that resource. If the new field values indicate that the cached entity differs from the current entity (as would be indicated by a change in Content-Length, Content-MD5, ETag or Last-Modified), then the cache MUST treat the cache entry as stale.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#HTTP_Version_Not_Supported -->

    <owl:Class rdf:about="#HTTP_Version_Not_Supported">
        <rdfs:label rdf:datatype="&xsd;string"
            >505 HTTP_Version_Not_Supported</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Internal_Server_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">505</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server does not support, or refuses to support, the HTTP protocol version that was used in the request message. The server is indicating that it is unable or unwilling to complete the request using the same major version as the client, as described in section 3.1, other than with this error message. The response SHOULD contain an entity describing why that version is not supported and what other protocols are supported by that server.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Header -->

    <owl:Class rdf:about="#Header"/>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Idempotent_Methods -->

    <owl:Class rdf:about="#Idempotent_Methods">
        <rdfs:label rdf:datatype="&xsd;string"
            >Idempotent Methods</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Methods can also have the property of &quot;idempotence&quot; in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request. The methods GET, HEAD, PUT and DELETE share this property. Also, the methods OPTIONS and TRACE SHOULD NOT have side effects, and so are inherently idempotent.

However, it is possible that a sequence of several requests is non- idempotent, even if all of the methods executed in that sequence are idempotent. (A sequence is idempotent if a single execution of the entire sequence always yields a result that is not changed by a reexecution of all, or part, of that sequence.) For example, a sequence is non-idempotent if its result depends on a value that is later modified in the same sequence.

A sequence that never has side effects is idempotent, by definition (provided that no concurrent operations are being executed on the same set of resources).</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Informational_Status_Code -->

    <owl:Class rdf:about="#Informational_Status_Code">
        <rdfs:label rdf:datatype="&xsd;string"
            >Informational Status Code</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Status_Code"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >This class of status code indicates a provisional response, consisting only of the Status-Line and optional headers, and is terminated by an empty line. There are no required headers for this class of status code. Since HTTP/1.0 did not define any 1xx status codes, servers MUST NOT send a 1xx response to an HTTP/1.0 client except under experimental conditions.

A client MUST be prepared to accept one or more 1xx status responses prior to a regular response, even if the client does not expect a 100 (Continue) status message. Unexpected 1xx status responses MAY be ignored by a user agent.

Proxies MUST forward 1xx responses, unless the connection between the proxy and its client has been closed, or unless the proxy itself requested the generation of the 1xx response. (For example, if a proxy adds a &quot;Expect: 100-continue&quot; field when it forwards a request, then it need not forward the corresponding 100 (Continue) response(s).)</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Internal_Server_Error -->

    <owl:Class rdf:about="#Internal_Server_Error">
        <rdfs:label rdf:datatype="&xsd;string"
            >500 Internal Server Error</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">500</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server encountered an unexpected condition which prevented it from fulfilling the request.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Length_Required -->

    <owl:Class rdf:about="#Length_Required">
        <rdfs:label rdf:datatype="&xsd;string"
            >411 Length Required</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">411</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server refuses to accept the request without a defined Content-Length. The client MAY repeat the request if it adds a valid Content-Length header field containing the length of the message-body in the request message.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Method_Not_Allowed -->

    <owl:Class rdf:about="#Method_Not_Allowed">
        <rdfs:label rdf:datatype="&xsd;string"
            >405 Method_Not_Allowed</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">405</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The method specified in the Request-Line is not allowed for the resource identified by the Request-URI. The response MUST include an Allow header containing a list of valid methods for the requested resource.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Methods -->

    <owl:Class rdf:about="#Methods"/>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Moved_Permanently -->

    <owl:Class rdf:about="#Moved_Permanently">
        <rdfs:label rdf:datatype="&xsd;string"
            >301 Moved Permanently</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Redirection_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">301</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The requested resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. Clients with link editing capabilities ought to automatically re-link references to the Request-URI to one or more of the new references returned by the server, where possible. This response is cacheable unless indicated otherwise.
			The new permanent URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).
			If the 301 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.
			      Note: When automatically redirecting a POST request after
			      receiving a 301 status code, some existing HTTP/1.0 user agents
			      will erroneously change it into a GET request.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Multiple_Choices -->

    <owl:Class rdf:about="#Multiple_Choices">
        <rdfs:label rdf:datatype="&xsd;string"
            >300 Multiple Choices</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Redirection_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">300</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The requested resource corresponds to any one of a set of representations, each with its own specific location, and agent- driven negotiation information (section 12) is being provided so that the user (or user agent) can select a preferred representation and redirect its request to that location.
			Unless it was a HEAD request, the response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content- Type header field. Depending upon the format and the capabilities of the user agent, selection of the most appropriate choice MAY be performed automatically. However, this specification does not define any standard for such automatic selection.
			If the server has a preferred choice of representation, it SHOULD include the specific URI for that representation in the Location field; user agents MAY use the Location field value for automatic redirection. This response is cacheable unless indicated otherwise.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#No_Content -->

    <owl:Class rdf:about="#No_Content">
        <rdfs:label rdf:datatype="&xsd;string">204 No Content</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Successful_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">204</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant.

				If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent&#39;s active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent&#39;s active view.

				The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Non-Authoritative_Information -->

    <owl:Class rdf:about="#Non-Authoritative_Information">
        <rdfs:label rdf:datatype="&xsd;string"
            >203 Non-Authoritative Information</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Successful_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">203</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The returned metainformation in the entity-header is not the definitive set as available from the origin server, but is gathered from a local or a third-party copy. The set presented MAY be a subset or superset of the original version. For example, including local annotation information about the resource might result in a superset of the metainformation known by the origin server. Use of this response code is not required and is only appropriate when the response would otherwise be 200 (OK).</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Not_Acceptable -->

    <owl:Class rdf:about="#Not_Acceptable">
        <rdfs:label rdf:datatype="&xsd;string"
            >406 Not Acceptable</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">406</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.
			Unless it was a HEAD request, the response SHOULD include an entity containing a list of available entity characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. Depending upon the format and the capabilities of the user agent, selection of the most appropriate choice MAY be performed automatically. However, this specification does not define any standard for such automatic selection.
			      Note: HTTP/1.1 servers are allowed to return responses which are
			      not acceptable according to the accept headers sent in the
			      request. In some cases, this may even be preferable to sending a
			      406 response. User agents are encouraged to inspect the headers of
			      an incoming response to determine if it is acceptable.

			If the response could be unacceptable, a user agent SHOULD temporarily stop receipt of more data and query the user for a decision on further actions.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Not_Found -->

    <owl:Class rdf:about="#Not_Found">
        <rdfs:label rdf:datatype="&xsd;string">404 Not Found</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">404</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Not_Implemented -->

    <owl:Class rdf:about="#Not_Implemented">
        <rdfs:label rdf:datatype="&xsd;string"
            >501 Not Implemented</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Internal_Server_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">501</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Not_Modified -->

    <owl:Class rdf:about="#Not_Modified">
        <rdfs:label rdf:datatype="&xsd;string"
            >304 Not Modified</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Redirection_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">304</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields.
			The response MUST include the following header fields:
			      - Date, unless its omission is required by section 14.18.1

			If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly.
			      - ETag and/or Content-Location, if the header would have been sent
			        in a 200 response to the same request

			      - Expires, Cache-Control, and/or Vary, if the field-value might
			        differ from that sent in any previous response for the same
			        variant

			If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers.
			If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional.
			If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#OK -->

    <owl:Class rdf:about="#OK">
        <rdfs:label rdf:datatype="&xsd;string">200 OK</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Successful_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">200</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The request has succeeded. The information returned with the response is dependent on the method used in the request, for example:

GET an entity corresponding to the requested resource is sent in the response;

HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body;

POST an entity describing or containing the result of the action;

TRACE an entity containing the request message as received by the end server.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#OPTIONS -->

    <owl:Class rdf:about="#OPTIONS">
        <rdfs:label rdf:datatype="&xsd;string">OPTIONS</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Idempotent_Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. This method allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.

Responses to this method are not cacheable.

If the OPTIONS request includes an entity-body (as indicated by the presence of Content-Length or Transfer-Encoding), then the media type MUST be indicated by a Content-Type field. Although this specification does not define any use for such a body, future extensions to HTTP might use the OPTIONS body to make more detailed queries on the server. A server that does not support such an extension MAY discard the request body.

If the Request-URI is an asterisk (&quot;*&quot;), the OPTIONS request is intended to apply to the server in general rather than to a specific resource. Since a server&#39;s communication options typically depend on the resource, the &quot;*&quot; request is only useful as a &quot;ping&quot; or &quot;no-op&quot; type of method; it does nothing beyond allowing the client to test the capabilities of the server. For example, this can be used to test a proxy for HTTP/1.1 compliance (or lack thereof).

If the Request-URI is not an asterisk, the OPTIONS request applies only to the options that are available when communicating with that resource.

A 200 response SHOULD include any header fields that indicate optional features implemented by the server and applicable to that resource (e.g., Allow), possibly including extensions not defined by this specification. The response body, if any, SHOULD also include information about the communication options. The format for such a body is not defined by this specification, but might be defined by future extensions to HTTP. Content negotiation MAY be used to select the appropriate response format. If no response body is included, the response MUST include a Content-Length field with a field-value of &quot;0&quot;.

The Max-Forwards request-header field MAY be used to target a specific proxy in the request chain. When a proxy receives an OPTIONS request on an absoluteURI for which request forwarding is permitted, the proxy MUST check for a Max-Forwards field. If the Max-Forwards field-value is zero (&quot;0&quot;), the proxy MUST NOT forward the message; instead, the proxy SHOULD respond with its own communication options. If the Max-Forwards field-value is an integer greater than zero, the proxy MUST decrement the field-value when it forwards the request. If no Max-Forwards field is present in the request, then the forwarded request MUST NOT include a Max-Forwards field.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#POST -->

    <owl:Class rdf:about="#POST">
        <rdfs:label rdf:datatype="&xsd;string">POST</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line. POST is designed to allow a uniform method to cover the following functions:

      - Annotation of existing resources;
      - Posting a message to a bulletin board, newsgroup, mailing list,
        or similar group of articles;
      - Providing a block of data, such as the result of submitting a
        form, to a data-handling process;
      - Extending a database through an append operation.
The actual function performed by the POST method is determined by the server and is usually dependent on the Request-URI. The posted entity is subordinate to that URI in the same way that a file is subordinate to a directory containing it, a news article is subordinate to a newsgroup to which it is posted, or a record is subordinate to a database.

The action performed by the POST method might not result in a resource that can be identified by a URI. In this case, either 200 (OK) or 204 (No Content) is the appropriate response status, depending on whether or not the response includes an entity that describes the result.

If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header (see section 14.30).

Responses to this method are not cacheable, unless the response includes appropriate Cache-Control or Expires header fields. However, the 303 (See Other) response can be used to direct the user agent to retrieve a cacheable resource.

POST requests MUST obey the message transmission requirements set out in section 8.2.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#PUT -->

    <owl:Class rdf:about="#PUT">
        <rdfs:label rdf:datatype="&xsd;string">PUT</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Idempotent_Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI. If a new resource is created, the origin server MUST inform the user agent via the 201 (Created) response. If an existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate successful completion of the request. If the resource could not be created or modified with the Request-URI, an appropriate error response SHOULD be given that reflects the nature of the problem. The recipient of the entity MUST NOT ignore any Content-* (e.g. Content-Range) headers that it does not understand or implement and MUST return a 501 (Not Implemented) response in such cases.

If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.

The fundamental difference between the POST and PUT requests is reflected in the different meaning of the Request-URI. The URI in a POST request identifies the resource that will handle the enclosed entity. That resource might be a data-accepting process, a gateway to some other protocol, or a separate entity that accepts annotations. In contrast, the URI in a PUT request identifies the entity enclosed with the request -- the user agent knows what URI is intended and the server MUST NOT attempt to apply the request to some other resource. If the server desires that the request be applied to a different URI, it MUST send a 301 (Moved Permanently) response; the user agent MAY then make its own decision regarding whether or not to redirect the request.

A single resource MAY be identified by many different URIs. For example, an article might have a URI for identifying &quot;the current version&quot; which is separate from the URI identifying each particular version. In this case, a PUT request on a general URI might result in several other URIs being defined by the origin server.

HTTP/1.1 does not define how a PUT method affects the state of an origin server.

PUT requests MUST obey the message transmission requirements set out in section 8.2.

Unless otherwise specified for a particular entity-header, the entity-headers in the PUT request SHOULD be applied to the resource created or modified by the PUT.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Partial_Content -->

    <owl:Class rdf:about="#Partial_Content">
        <rdfs:label rdf:datatype="&xsd;string"
            >206 Partial Content</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Successful_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">206</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server has fulfilled the partial GET request for the resource. The request MUST have included a Range header field (section 14.35) indicating the desired range, and MAY have included an If-Range header field (section 14.27) to make the request conditional.

				The response MUST include the following header fields:

				      - Either a Content-Range header field (section 14.16) indicating
				        the range included with this response, or a multipart/byteranges
				        Content-Type including Content-Range fields for each part. If a
				        Content-Length header field is present in the response, its
				        value MUST match the actual number of OCTETs transmitted in the
				        message-body.
				      - Date
				      - ETag and/or Content-Location, if the header would have been sent
				        in a 200 response to the same request
				      - Expires, Cache-Control, and/or Vary, if the field-value might
				        differ from that sent in any previous response for the same
				        variant
				If the 206 response is the result of an If-Range request that used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. If the response is the result of an If-Range request that used a weak validator, the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. Otherwise, the response MUST include all of the entity-headers that would have been returned with a 200 (OK) response to the same request.

				A cache MUST NOT combine a 206 response with other previously cached content if the ETag or Last-Modified headers do not match exactly, see 13.5.4.

				A cache that does not support the Range and Content-Range headers MUST NOT cache 206 (Partial) responses.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Payment_Required -->

    <owl:Class rdf:about="#Payment_Required">
        <rdfs:label rdf:datatype="&xsd;string"
            >402 Payment Required</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">402</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >This code is reserved for future use.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Pragma -->

    <owl:Class rdf:about="#Pragma">
        <rdfs:label rdf:datatype="&xsd;string">Pragma</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Used to include implementation-specific directives that might (optionally) apply to any recipient along the request/response chain.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Precondition_Failed -->

    <owl:Class rdf:about="#Precondition_Failed">
        <rdfs:label rdf:datatype="&xsd;string"
            >412 Precondition Failed</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">412</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server. This response code allows the client to place preconditions on the current resource metainformation (header field data) and thus prevent the requested method from being applied to a resource other than the one intended.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Proxy_Authentication_Required -->

    <owl:Class rdf:about="#Proxy_Authentication_Required">
        <rdfs:label rdf:datatype="&xsd;string"
            >407 Proxy Authentication Required</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">407</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >This code is similar to 401 (Unauthorized), but indicates that the client must first authenticate itself with the proxy. The proxy MUST return a Proxy-Authenticate header field (section 14.33) containing a challenge applicable to the proxy for the requested resource. The client MAY repeat the request with a suitable Proxy-Authorization header field (section 14.34). HTTP access authentication is explained in &quot;HTTP Authentication: Basic and Digest Access Authentication&quot;.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Redirection_Status_Code -->

    <owl:Class rdf:about="#Redirection_Status_Code">
        <rdfs:label rdf:datatype="&xsd;string"
            >Redirection Status Code</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Status_Code"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >This class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request. The action required MAY be carried out by the user agent without interaction with the user if and only if the method used in the second request is GET or HEAD. A client SHOULD detect infinite redirection loops, since such loops generate network traffic for each redirection.

      Note: previous versions of this specification recommended a
      maximum of five redirections. Content developers should be aware
      that there might be clients that implement such a fixed
      limitation.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Request -->

    <owl:Class rdf:about="#Request">
        <rdfs:subClassOf rdf:resource="#Header"/>
        <rdfs:comment xml:lang="en"
            >Sent by a browser or other client to a server</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Request-URI_Too_Long -->

    <owl:Class rdf:about="#Request-URI_Too_Long">
        <rdfs:label rdf:datatype="&xsd;string"
            >414 Request-URI Too Long</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">414</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret. This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a URI &quot;black hole&quot; of redirection (e.g., a redirected URI prefix that points to a suffix of itself), or when the server is under attack by a client attempting to exploit security holes present in some servers using fixed-length buffers for reading or manipulating the Request-URI.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Request_Entity_Too_Large -->

    <owl:Class rdf:about="#Request_Entity_Too_Large">
        <rdfs:label rdf:datatype="&xsd;string"
            >413 Request Entity Too Large</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">413</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server is refusing to process a request because the request entity is larger than the server is willing or able to process. The server MAY close the connection to prevent the client from continuing the request.
			If the condition is temporary, the server SHOULD include a Retry-After header field to indicate that it is temporary and after what time the client MAY try again.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Request_Timeout -->

    <owl:Class rdf:about="#Request_Timeout">
        <rdfs:label rdf:datatype="&xsd;string"
            >408 Request Timeout</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">408</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Requested_Range_Not_Satisfiable -->

    <owl:Class rdf:about="#Requested_Range_Not_Satisfiable">
        <rdfs:label rdf:datatype="&xsd;string"
            >416 Requested Range Not Satisfiable</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">416</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >A server SHOULD return a response with this status code if a request included a Range request-header field (section 14.35), and none of the range-specifier values in this field overlap the current extent of the selected resource, and the request did not include an If-Range request-header field. (For byte-ranges, this means that the first-byte-pos of all of the byte-range-spec values were greater than the current length of the selected resource.)
			When this status code is returned for a byte-range request, the response SHOULD include a Content-Range entity-header field specifying the current length of the selected resource (see section 14.16). This response MUST NOT use the multipart/byteranges content-type.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Reset_Content -->

    <owl:Class rdf:about="#Reset_Content">
        <rdfs:label rdf:datatype="&xsd;string"
            >205 Reset Content</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Successful_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">205</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server has fulfilled the request and the user agent SHOULD reset the document view which caused the request to be sent. This response is primarily intended to allow input for actions to take place via user input, followed by a clearing of the form in which the input is given so that the user can easily initiate another input action. The response MUST NOT include an entity.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Response -->

    <owl:Class rdf:about="#Response">
        <rdfs:subClassOf rdf:resource="#Header"/>
        <rdfs:comment xml:lang="en"
            >Sent by a server in a response to a request</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Safe_Methods -->

    <owl:Class rdf:about="#Safe_Methods">
        <rdfs:label rdf:datatype="&xsd;string">Safe Methods</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Implementors should be aware that the software represents the user in their interactions over the Internet, and should be careful to allow the user to be aware of any actions they might take which may have an unexpected significance to themselves or others.

In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval. These methods ought to be considered &quot;safe&quot;. This allows user agents to represent other methods, such as POST, PUT and DELETE, in a special way, so that the user is made aware of the fact that a possibly unsafe action is being requested.

Naturally, it is not possible to ensure that the server does not generate side-effects as a result of performing a GET request; in fact, some dynamic resources consider that a feature. The important distinction here is that the user did not request the side-effects, so therefore cannot be held accountable for them.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#See_Other -->

    <owl:Class rdf:about="#See_Other">
        <rdfs:label rdf:datatype="&xsd;string">303 See Other</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Redirection_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">303</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource. This method exists primarily to allow the output of a POST-activated script to redirect the user agent to a selected resource. The new URI is not a substitute reference for the originally requested resource. The 303 response MUST NOT be cached, but the response to the second (redirected) request might be cacheable.
			The different URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).
			      Note: Many pre-HTTP/1.1 user agents do not understand the 303
			      status. When interoperability with such clients is a concern, the
			      302 status code may be used instead, since most user agents react
			      to a 302 response as described here for 303.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Service_Unavailable -->

    <owl:Class rdf:about="#Service_Unavailable">
        <rdfs:label rdf:datatype="&xsd;string"
            >503 Service Unavailable</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Internal_Server_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">503</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server is currently unable to handle the request due to a temporary overloading or maintenance of the server. The implication is that this is a temporary condition which will be alleviated after some delay. If known, the length of the delay MAY be indicated in a Retry-After header. If no Retry-After is given, the client SHOULD handle the response as it would for a 500 response.

      Note: The existence of the 503 status code does not imply that a
      server must use it when becoming overloaded. Some servers may wish
      to simply refuse the connection.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Status_Code -->

    <owl:Class rdf:about="#Status_Code">
        <rdfs:label rdf:datatype="&xsd;string">Status Code</rdfs:label>
        <rdfs:comment rdf:datatype="&xsd;string"
            >Each Status-Code is described below, including a description of which method(s) it can follow and any metainformation required in the response.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Successful_Status_Code -->

    <owl:Class rdf:about="#Successful_Status_Code">
        <rdfs:label rdf:datatype="&xsd;string"
            >Successful Status Code</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Status_Code"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >This class of status code indicates that the client&#39;s request was successfully received, understood, and accepted.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Switching_Protocols -->

    <owl:Class rdf:about="#Switching_Protocols">
        <rdfs:label rdf:datatype="&xsd;string"
            >101 Switching Protocols</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Informational_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">101</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server understands and is willing to comply with the client&#39;s request, via the Upgrade message header field (section 14.42), for a change in the application protocol being used on this connection. The server will switch protocols to those defined by the response&#39;s Upgrade header field immediately after the empty line which terminates the 101 response.

The protocol SHOULD be switched only when it is advantageous to do so. For example, switching to a newer version of HTTP is advantageous over older versions, and switching to a real-time, synchronous protocol might be advantageous when delivering resources that use such features.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#TRACE -->

    <owl:Class rdf:about="#TRACE">
        <rdfs:label rdf:datatype="&xsd;string">TRACE</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Idempotent_Methods"/>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The TRACE method is used to invoke a remote, application-layer loop- back of the request message. The final recipient of the request SHOULD reflect the message received back to the client as the entity-body of a 200 (OK) response. The final recipient is either the origin server or the first proxy or gateway to receive a Max-Forwards value of zero (0) in the request (see section 14.31). A TRACE request MUST NOT include an entity.

TRACE allows the client to see what is being received at the other end of the request chain and use that data for testing or diagnostic information. The value of the Via header field (section 14.45) is of particular interest, since it acts as a trace of the request chain. Use of the Max-Forwards header field allows the client to limit the length of the request chain, which is useful for testing a chain of proxies forwarding messages in an infinite loop.

If the request is valid, the response SHOULD contain the entire request message in the entity-body, with a Content-Type of &quot;message/http&quot;. Responses to this method MUST NOT be cached.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Temporary_Redirect -->

    <owl:Class rdf:about="#Temporary_Redirect">
        <rdfs:label rdf:datatype="&xsd;string"
            >307 Temporary Redirect</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Redirection_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">307</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The requested resource resides temporarily under a different URI. Since the redirection MAY be altered on occasion, the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if indicated by a Cache-Control or Expires header field.
			The temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s) , since many pre-HTTP/1.1 user agents do not understand the 307 status. Therefore, the note SHOULD contain the information necessary for a user to repeat the original request on the new URI.
			If the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Unauthorized -->

    <owl:Class rdf:about="#Unauthorized">
        <rdfs:label rdf:datatype="&xsd;string"
            >401 Unauthorized</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">401</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field (section 14.8). If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in &quot;HTTP Authentication: Basic and Digest Access Authentication&quot;</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Unsupported_Media_Type -->

    <owl:Class rdf:about="#Unsupported_Media_Type">
        <rdfs:label rdf:datatype="&xsd;string"
            >415 Unsupported Media Type</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Client_Error"/>
        <dc:identifier rdf:datatype="&xsd;string">415</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Unused -->

    <owl:Class rdf:about="#Unused">
        <rdfs:label rdf:datatype="&xsd;string">306 Unused</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Redirection_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">306</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The 306 status code was used in a previous version of the specification, is no longer used, and the code is reserved.</rdfs:comment>
    </owl:Class>
    


    <!-- https://raw.github.com/mswimmer/HTTP-Ontology/master/http.owl#Use_Proxy -->

    <owl:Class rdf:about="#Use_Proxy">
        <rdfs:label rdf:datatype="&xsd;string">305 Use Proxy</rdfs:label>
        <rdfs:subClassOf rdf:resource="#Redirection_Status_Code"/>
        <dc:identifier rdf:datatype="&xsd;string">305</dc:identifier>
        <rdfs:comment rdf:datatype="&xsd;string"
            >The requested resource MUST be accessed through the proxy given by the Location field. The Location field gives the URI of the proxy. The recipient is expected to repeat this single request via the proxy. 305 responses MUST only be generated by origin servers.
			      Note: RFC 2068 was not clear that 305 was intended to redirect a
			      single request, and to be generated by origin servers only.  Not
			      observing these limitations has significant security consequences.</rdfs:comment>
    </owl:Class>
</rdf:RDF>



<!-- Generated by the OWL API (version 2.2.1.1138) http://owlapi.sourceforge.net -->

